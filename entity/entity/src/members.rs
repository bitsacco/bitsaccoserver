//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use super::sea_orm_active_enums::MemberStatus;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "members")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(unique)]
    pub member_number: String,
    pub name: String,
    pub email: Option<String>,
    pub phone: Option<String>,
    pub status: MemberStatus,
    pub keycloak_user_id: Option<String>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub profile: Option<Json>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    pub created_by: Option<Uuid>,
    pub updated_by: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::group_memberships::Entity")]
    GroupMemberships,
}

impl Related<super::group_memberships::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupMemberships.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
