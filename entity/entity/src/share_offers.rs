//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use super::sea_orm_active_enums::ShareOfferStatus;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "share_offers")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    #[sea_orm(column_type = "Decimal(Some((15, 2)))")]
    pub price_per_share: Decimal,
    #[sea_orm(column_type = "Decimal(Some((15, 2)))")]
    pub total_shares_available: Decimal,
    #[sea_orm(column_type = "Decimal(Some((15, 2)))")]
    pub shares_sold: Decimal,
    #[sea_orm(column_type = "Decimal(Some((15, 2)))")]
    pub shares_remaining: Decimal,
    pub status: ShareOfferStatus,
    pub valid_from: Option<DateTimeWithTimeZone>,
    pub valid_until: Option<DateTimeWithTimeZone>,
    #[sea_orm(column_type = "Decimal(Some((15, 2)))", nullable)]
    pub min_purchase_quantity: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((15, 2)))", nullable)]
    pub max_purchase_quantity: Option<Decimal>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub settings: Option<Json>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub metadata: Option<Json>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    pub created_by: Option<Uuid>,
    pub updated_by: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::shares::Entity")]
    Shares,
}

impl Related<super::shares::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Shares.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
