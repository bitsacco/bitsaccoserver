//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use super::sea_orm_active_enums::WalletStatus;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "wallets")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub owner_id: Uuid,
    pub owner_type: String,
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub status: WalletStatus,
    pub balance_msat: i64,
    pub pending_in_msat: i64,
    pub pending_out_msat: i64,
    pub federation_id: Option<String>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub client_config: Option<Json>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub metadata: Option<Json>,
    pub last_sync_at: Option<DateTimeWithTimeZone>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    pub created_by: Option<Uuid>,
    pub updated_by: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::fedimint_operations::Entity")]
    FedimintOperations,
    #[sea_orm(has_many = "super::wallet_reserves::Entity")]
    WalletReserves,
    #[sea_orm(has_many = "super::wallet_transactions::Entity")]
    WalletTransactions,
}

impl Related<super::fedimint_operations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FedimintOperations.def()
    }
}

impl Related<super::wallet_reserves::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WalletReserves.def()
    }
}

impl Related<super::wallet_transactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WalletTransactions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
