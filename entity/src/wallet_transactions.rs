//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

// Re-export the enums for external use
pub use super::sea_orm_active_enums::{TransactionStatus, TransactionType};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "wallet_transactions")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub wallet_id: Uuid,
    pub transaction_type: TransactionType,
    pub status: TransactionStatus,
    pub amount_msat: i64,
    pub fee_msat: i64,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub external_id: Option<String>,
    pub counterparty_id: Option<Uuid>,
    pub fedimint_operation_id: Option<Uuid>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub metadata: Option<Json>,
    pub processed_at: Option<DateTimeWithTimeZone>,
    pub expires_at: Option<DateTimeWithTimeZone>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    pub created_by: Option<Uuid>,
    pub updated_by: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::lnurl_transactions::Entity")]
    LnurlTransactions,
    #[sea_orm(
        belongs_to = "super::wallets::Entity",
        from = "Column::WalletId",
        to = "super::wallets::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Wallets,
}

impl Related<super::lnurl_transactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LnurlTransactions.def()
    }
}

impl Related<super::wallets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Wallets.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
