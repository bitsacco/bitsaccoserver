//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

// Re-export the enums for external use
pub use super::sea_orm_active_enums::{GroupStatus, GroupType};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "groups")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub group_type: GroupType,
    pub status: GroupStatus,
    pub parent_id: Option<Uuid>,
    pub path: Option<String>,
    pub level: i32,
    pub sort_order: Option<i32>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub settings: Option<Json>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub metadata: Option<Json>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    pub created_by: Option<Uuid>,
    pub updated_by: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::group_memberships::Entity")]
    GroupMemberships,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::ParentId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    SelfRef,
}

impl Related<super::group_memberships::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupMemberships.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl Model {
    pub fn can_have_children(&self) -> bool {
        matches!(self.group_type, GroupType::Organization)
    }
}
