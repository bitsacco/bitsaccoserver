//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(
    rs_type = "String",
    db_type = "Enum",
    enum_name = "fedimint_operation_type"
)]
pub enum FedimintOperationType {
    #[sea_orm(string_value = "deposit")]
    Deposit,
    #[sea_orm(string_value = "withdraw")]
    Withdraw,
    #[sea_orm(string_value = "lightning")]
    Lightning,
    #[sea_orm(string_value = "onchain")]
    Onchain,
    #[sea_orm(string_value = "mint")]
    Mint,
    #[sea_orm(string_value = "backup")]
    Backup,
    #[sea_orm(string_value = "recovery")]
    Recovery,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "reserve_type")]
pub enum ReserveType {
    #[sea_orm(string_value = "available")]
    Available,
    #[sea_orm(string_value = "pending")]
    Pending,
    #[sea_orm(string_value = "locked")]
    Locked,
    #[sea_orm(string_value = "emergency")]
    Emergency,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "transaction_status")]
pub enum TransactionStatus {
    #[sea_orm(string_value = "pending")]
    Pending,
    #[sea_orm(string_value = "processing")]
    Processing,
    #[sea_orm(string_value = "completed")]
    Completed,
    #[sea_orm(string_value = "failed")]
    Failed,
    #[sea_orm(string_value = "cancelled")]
    Cancelled,
    #[sea_orm(string_value = "expired")]
    Expired,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "transaction_type")]
pub enum TransactionType {
    #[sea_orm(string_value = "deposit")]
    Deposit,
    #[sea_orm(string_value = "withdraw")]
    Withdraw,
    #[sea_orm(string_value = "transfer")]
    Transfer,
    #[sea_orm(string_value = "payment")]
    Payment,
    #[sea_orm(string_value = "refund")]
    Refund,
    #[sea_orm(string_value = "fee")]
    Fee,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "wallet_status")]
pub enum WalletStatus {
    #[sea_orm(string_value = "active")]
    Active,
    #[sea_orm(string_value = "inactive")]
    Inactive,
    #[sea_orm(string_value = "suspended")]
    Suspended,
    #[sea_orm(string_value = "closed")]
    Closed,
}
